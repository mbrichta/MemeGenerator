{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathi\\\\Documents\\\\MemeGenerator-react-app\\\\src\\\\components\\\\MemeGenerator.js\";\nimport React, { Component } from 'react';\n\nclass MemeGenerator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\n      allMemeImg: [],\n      sugestionImgOne: \"\",\n      sugestionImgTwo: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.random = this.random.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\").then(response => response.json()).then(response => {\n      const {\n        memes\n      } = response.data;\n      this.setState({\n        allMemeImg: memes\n      });\n    });\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const rndm = Math.floor(Math.random() * this.state.allMemeImg.length);\n    const imgUrl = this.state.allMemeImg[rndm].url;\n    this.setState({\n      randomImg: imgUrl\n    });\n  }\n\n  random() {\n    const rndm = Math.floor(Math.random() * this.state.allMemeImg.length);\n    const imgUrl = this.state.allMemeImg[rndm].url;\n    return imgUrl;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"meme-form\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"textbox\",\n      name: \"topText\",\n      value: this.setState.topText,\n      onChange: this.handleChange,\n      placeholder: \"Top Text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"textbox\",\n      name: \"bottomText\",\n      value: this.setState.bottomText,\n      onChange: this.handleChange,\n      placeholder: \"Bottom Text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Gen\")), React.createElement(\"div\", {\n      className: \"meme\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.randomImg,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      className: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, this.state.topText), React.createElement(\"h2\", {\n      className: \"bottom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.state.bottomText)), React.createElement(RandomSuggestion, {\n      rndmImgOne: this.random,\n      randomImgTwo: this.state.sugestionImgTwo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MemeGenerator;","map":{"version":3,"sources":["C:/Users/mathi/Documents/MemeGenerator-react-app/src/components/MemeGenerator.js"],"names":["React","Component","MemeGenerator","constructor","state","topText","bottomText","randomImg","allMemeImg","sugestionImgOne","sugestionImgTwo","handleChange","bind","handleSubmit","random","componentDidMount","fetch","then","response","json","memes","data","setState","event","name","value","target","preventDefault","rndm","Math","floor","length","imgUrl","url","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n\r\n\r\nclass MemeGenerator extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            topText: \"\",\r\n            bottomText: \"\",\r\n            randomImg: \"http://i.imgflip.com/1bij.jpg\",\r\n            allMemeImg: [],\r\n            sugestionImgOne: \"\",\r\n            sugestionImgTwo: \"\"\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.random = this.random.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const { memes } = response.data\r\n                this.setState({\r\n                    allMemeImg: memes\r\n                })\r\n            })\r\n    }\r\n\r\n    handleChange(event) {\r\n        const { name, value } = event.target\r\n\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault()\r\n        const rndm = Math.floor(Math.random() * this.state.allMemeImg.length)\r\n        const imgUrl = this.state.allMemeImg[rndm].url\r\n        this.setState({\r\n            randomImg: imgUrl,\r\n        })\r\n    }\r\n\r\n    random() {\r\n        const rndm = Math.floor(Math.random() * this.state.allMemeImg.length)\r\n        const imgUrl = this.state.allMemeImg[rndm].url\r\n        return imgUrl\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"grid\">\r\n                <form className=\"meme-form\" onSubmit={this.handleSubmit}>\r\n                    <input\r\n                        type=\"textbox\"\r\n                        name=\"topText\"\r\n                        value={this.setState.topText}\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"Top Text\"\r\n                    />\r\n                    <input\r\n                        type=\"textbox\"\r\n                        name=\"bottomText\"\r\n                        value={this.setState.bottomText}\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"Bottom Text\"\r\n                    />\r\n                    <button>Gen</button>\r\n                </form>\r\n\r\n                <div className=\"meme\">\r\n                    <img src={this.state.randomImg} alt=\"\" />\r\n                    <h2 className=\"top\">{this.state.topText}</h2>\r\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n                </div>\r\n\r\n                <RandomSuggestion rndmImgOne={this.random} randomImgTwo={this.state.sugestionImgTwo} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeGenerator"]},"metadata":{},"sourceType":"module"}